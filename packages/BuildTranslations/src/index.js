import fs from "fs";
import path from "path";
import jsYaml from "js-yaml";

const buildPath = output => path.resolve(process.cwd(), output);
const isYamlFile = (fileName, yamlFileExtension) => fileName.split(".")[1] === yamlFileExtension;
const isJsTranslationFile = fileName => fileName.split(".")[1] === "js" && fileName.split(".")[0] !== "index";

async function removeTranslationFiles(outputPath) {
  let files = [];

  try {
    files = await fs.promises.readdir(outputPath);
  } catch (err) {
    console.log(err);
    console.error("Couldnt scan directory");
    process.exit(1);
  }

  console.log(`🦁  - cleaning up old files`);

  await Promise.all(
    files.map(fileName => {
      if (fileName !== ".gitkeep" && isJsTranslationFile(fileName)) {
        return fs.promises.unlink(buildPath(`${outputPath}/${fileName}`));
      }
      return null;
    })
  );
}

async function createTranslationFile({ sourcePath, outputPath, yamlFileName, yamlFileExtension }) {
  const outputFileName = yamlFileName.replace(`.${yamlFileExtension}`, ".js");
  const yamlFile = await fs.promises.readFile(buildPath(`${sourcePath}/${yamlFileName}`), { encoding: "utf-8" });
  const yamlAsJsonObject = jsYaml.load(yamlFile);

  const outputFileContents = `// Do not edit this file, it is automatically generated by @paprika/build-translations
  const locales = ${JSON.stringify(yamlAsJsonObject, null, 2)};
  export default locales;`;

  console.log(`🦁  - creating ${outputPath}/${outputFileName}`);

  await fs.promises.writeFile(buildPath(`${outputPath}/${outputFileName}`), outputFileContents, () => {});
}

async function generateTranslationFiles({ sourcePath, outputPath, yamlFileExtension }) {
  try {
    const yamlFiles = await fs.promises.readdir(buildPath(sourcePath));

    await Promise.all(
      yamlFiles.map(yamlFileName => {
        if (isYamlFile(yamlFileName, yamlFileExtension)) {
          return createTranslationFile({ sourcePath, outputPath, yamlFileName, yamlFileExtension });
        }
        return null;
      })
    );
  } catch (err) {
    console.log(err);
    console.error("Couldn't scan directory");
    process.exit(1);
  }
}

export default async function buildTranslations({
  sourcePath = process.cwd(),
  outputPath = sourcePath,
  yamlFileExtension = "yml",
}) {
  try {
    await removeTranslationFiles(outputPath);
    await generateTranslationFiles({ sourcePath, outputPath, yamlFileExtension });
  } catch (e) {
    console.error(e);
  }
}
