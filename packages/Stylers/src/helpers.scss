@import "@paprika/tokens/lib/tokens.scss";

//
// FUNCTION Helpers
//

// Utilities

// Divide the given `$divident` by the given `$divisor`
// Author: Foundation Community
// Date: 2021
// Code version: v6.6.3
// Availability: https://github.com/ahukkanen/foundation-sites/blob/28f0cc3252272e0c6d3e2b18d376a6beda6f766f/scss/util/_math.scss

@function div($dividend, $divisor, $precision: 12) {
  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error "NaN";
  }
  $remainder: $dividend;
  $result: 0;
  $factor: 10;
  @while ($remainder > 0 and $precision >= 0) {
    $quotient: 0;
    @while ($remainder >= $divisor) {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }
    $result: $result * 10 + $quotient;
    $factor: $factor * 0.1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;
    @if ($precision < 0 and $remainder >= $divisor * 5) {
      $result: $result + 1;
    }
  }
  $result: $result * $factor * $sign;

  @return $result;
}

@function pow($base, $exponent) {
  $unit: $base * 0 + 1;
  $base: div($base, $unit);
  $value: $base;

  // No non-intergers allowed
  @if round($exponent) != $exponent {
    @warn "Unfortunately, you can't use non-integer exponents.";
  }

  @if $exponent > 0 {
    @for $i from 1 to $exponent {
      $value: $value * $base;
    }
  } @else {
    @for $i from (-1 + 1) to (abs($exponent) + 1) {
      $value: div($value, $base);
    }
  }

  @return $value * $unit;
}

// Typography

$font-scale-base: 16px;
$font-scale-ratio: 1.125;

// Return a font-size value from on a modular scale
@function font-scale($scale: 0) {
  @return round($font-scale-base * pow($font-scale-ratio, $scale));
}

$leading-scale-base: 1.4;
$leading-scale-ratio: 1.125;

// Return a line-height value from on a modular scale
@function line-height-scale($scale: 0) {
  @return div(round($leading-scale-base * (pow($leading-scale-ratio, $scale) * 100)), 100);
}

// Layout

// Restricts z-index values to a standard scale
@function z($layerName) {
  $map: (
    auto: auto,
    initial: initial,
    inherit: inherit,
    -1: -1,
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
  );

  @if map-has-key($map, $layerName) {
    @return map-get($map, $layerName);
  }

  @warn 'There is no item "#{$layerName}" in this list; choose one of: #{$map}';
  @return 1;
}

//
// MIXIN Helpers
//

// Typography

// Prevents line-breaks and truncates with ...
@mixin truncate-text() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Undoes @truncate-text
@mixin no-truncate-text() {
  overflow: visible;
  text-overflow: clip;
  white-space: normal;
}

// Accessibility

// Makes an element visually hidden, but accessible for screen readers
@mixin is-visually-hidden() {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px);
  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
  height: 1px !important;
  overflow: hidden;
  padding: 0 !important;
  position: absolute !important;
  white-space: nowrap;
  width: 1px !important;
}

// Focus Indicators

@mixin focus-ring($inset: false) {
  @if $inset {
    box-shadow: $highlight--active--with-border--inset-box-shadow;
    outline: none;
  } @else {
    box-shadow: $highlight--active--with-border--box-shadow;
    outline: none;
  }
}

@mixin focus-ring--bordered($inset: false) {
  @if $inset {
    border-color: $highlight--active--no-border--border-color;
    box-shadow: $highlight--active--no-border--inset-box-shadow;
    outline: none;
  } @else {
    border-color: $highlight--active--no-border--border-color;
    box-shadow: $highlight--active--no-border--box-shadow;
    outline: none;
  }
}

@mixin focus-ring--subtle($inset: false) {
  @if $inset {
    outline: $highlight--active--non-interactive--outline;
    outline-offset: -2px;
  } @else {
    outline: $highlight--active--non-interactive--outline;
  }
}

// Forms

@mixin placeholder() {
  color: $placeholder--color;
  font-style: $placeholder--font-style;

  .is-disabled &,
  &[disabled] {
    @include disabled-placeholder();
  }
}

@mixin disabled-placeholder() {
  color: $color--black-lighten-60;
}

@mixin placeholders() {
  &::placeholder {
    @include placeholder();
  }

  &::-webkit-input-placeholder {
    @include placeholder();
  }

  // opacity: 1 is added to fix firefox placeholder text color issue
  // https://stackoverflow.com/q/19621306/196038
  &::-moz-placeholder {
    @include placeholder();
    opacity: 1;
  }

  &:-ms-input-placeholder {
    @include placeholder();
  }

  &:-moz-placeholder {
    @include placeholder();
    opacity: 1;
  }

  &[disabled]::placeholder {
    @include disabled-placeholder();
  }

  &[disabled]::-webkit-input-placeholder {
    @include disabled-placeholder();
  }

  &[disabled]::-moz-placeholder {
    @include disabled-placeholder();
    opacity: 1;
  }

  &[disabled]:-ms-input-placeholder {
    @include disabled-placeholder();
  }

  &[disabled]:-moz-placeholder {
    @include disabled-placeholder();
    opacity: 1;
  }
}
